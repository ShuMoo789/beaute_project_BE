const mongoose = require("mongoose");
const Routine = require("../models/routine.model");

const routineController = {
  // üü¢ T·∫°o Routine m·ªõi
  create: async (req, res) => {
    try {
      const { routineName, routineDescription, skinType } = req.body;

      if (!routineName || !routineDescription || !skinType) {
        return res.status(400).json({
          ok: false,
          message: "B·∫°n c·∫ßn nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin",
        });
      }

      if (!mongoose.Types.ObjectId.isValid(skinType)) {
        return res.status(400).json({
          ok: false,
          message: "skinType kh√¥ng h·ª£p l·ªá",
        });
      }

      const newRoutine = await Routine.create({
        routineName,
        routineDescription,
        skinType,
        steps: [],
      });

      return res.status(201).json({
        ok: true,
        message: "T·∫°o Routine th√†nh c√¥ng",
        routine: newRoutine,
      });
    } catch (error) {
      return res.status(500).json({
        ok: false,
        message: error.message || "L·ªói h·ªá th·ªëng",
      });
    }
  },

  // üü¢ L·∫•y danh s√°ch t·∫•t c·∫£ Routine
  getAll: async (req, res) => {
    try {
      const routines = await Routine.find().populate("skinType").populate("steps");
      return res.status(200).json({
        ok: true,
        routines,
      });
    } catch (error) {
      return res.status(500).json({
        ok: false,
        message: error.message || "L·ªói h·ªá th·ªëng",
      });
    }
  },

  // üü¢ L·∫•y Routine theo ID
  getById: async (req, res) => {
    try {
      const { id } = req.params;

      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          ok: false,
          message: "ID kh√¥ng h·ª£p l·ªá",
        });
      }

      const routine = await Routine.findById(id).populate("skinType").populate("steps");
      if (!routine) {
        return res.status(404).json({
          ok: false,
          message: "Kh√¥ng t√¨m th·∫•y Routine",
        });
      }

      return res.status(200).json({
        ok: true,
        routine,
      });
    } catch (error) {
      return res.status(500).json({
        ok: false,
        message: error.message || "L·ªói h·ªá th·ªëng",
      });
    }
  },

  // üü¢ C·∫≠p nh·∫≠t Routine
  update: async (req, res) => {
    try {
      const { id } = req.params;
      const { routineName, routineDescription, skinType } = req.body;

      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          ok: false,
          message: "ID kh√¥ng h·ª£p l·ªá",
        });
      }

      const existingRoutine = await Routine.findById(id);
      if (!existingRoutine) {
        return res.status(404).json({
          ok: false,
          message: "Kh√¥ng t√¨m th·∫•y Routine",
        });
      }

      const updatedRoutine = await Routine.findByIdAndUpdate(
        id,
        { routineName, routineDescription, skinType },
        { new: true, runValidators: true }
      );

      return res.status(200).json({
        ok: true,
        message: "C·∫≠p nh·∫≠t Routine th√†nh c√¥ng",
        routine: updatedRoutine,
      });
    } catch (error) {
      return res.status(500).json({
        ok: false,
        message: error.message || "L·ªói h·ªá th·ªëng",
      });
    }
  },

  // üü¢ X√≥a Routine
  delete: async (req, res) => {
    try {
      const { id } = req.params;

      if (!mongoose.Types.ObjectId.isValid(id)) {
        return res.status(400).json({
          ok: false,
          message: "ID kh√¥ng h·ª£p l·ªá",
        });
      }

      const existingRoutine = await Routine.findById(id);
      if (!existingRoutine) {
        return res.status(404).json({
          ok: false,
          message: "Kh√¥ng t√¨m th·∫•y Routine",
        });
      }

      await Routine.findByIdAndDelete(id);

      return res.status(200).json({
        ok: true,
        message: "X√≥a Routine th√†nh c√¥ng",
      });
    } catch (error) {
      return res.status(500).json({
        ok: false,
        message: error.message || "L·ªói h·ªá th·ªëng",
      });
    }
  },
};

module.exports = routineController;
